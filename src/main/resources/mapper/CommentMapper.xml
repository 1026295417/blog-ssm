<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
        "-//mybtis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="xyz.stackoverflow.blog.dao.CommentDao">

    <resultMap id="commentMap" type="comment">
        <id property="id" column="id"/>
        <result property="nickname" column="nickname"/>
        <result property="email" column="email"/>
        <result property="website" column="website"/>
        <result property="content" column="content"/>
        <result property="articleId" column="articleid"/>
        <result property="replyTo" column="replyto"/>
        <result property="review" column="review"/>
        <result property="date" column="date" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
    </resultMap>

    <select id="selectByPage" resultMap="commentMap" resultType="comment">
        select * from comment order by date desc limit #{start},#{limit}
    </select>

    <select id="selectByCondition" resultMap="commentMap" resultType="comment">
        select * from comment
        <where>
            <if test="articleId != null">
                articleid = #{articleId}
            </if>
            <if test="review != null">
                and review = #{review}
            </if>
        </where>
        order by date desc
    </select>

    <select id="selectById" resultMap="commentMap" resultType="comment">
        select * from comment where id = #{id}
    </select>

    <insert id="insert" parameterType="comment">
        insert into comment (id,nickname,email,website,content,articleid,replyto,review,date)
        values (#{id},#{nickname},#{email},#{website},#{content},#{articleId},#{replyTo},#{review},#{date})
    </insert>

    <insert id="batchInsert" parameterType="list">
        insert into comment (id,nickname,email,website,content,articleid,replyto,review,date)
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.id},#{item.nickname},#{item.email},#{item.website},#{item.content},#{item.articleId},#{item.replyTo},#{item.review},#{item.date})
        </foreach>
    </insert>

    <delete id="deleteById" parameterType="string">
        delete from comment where id = #{id}
    </delete>

    <delete id="batchDeleteById" parameterType="list">
        delete from comment where id in
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <update id="update" parameterType="comment">
        update comment
        <set>
            <if test="nickname != null">
                nickname = #{nickame},
            </if>
            <if test="email != null">
                email = #{email}
            </if>
            <if test="website != null">
                website = #{website}
            </if>
            <if test="content != null">
                content = #{content}
            </if>
            <if test="articleId != null">
                articleid = #{articleId}
            </if>
            <if test="replyTo != null">
                replyto = #{replyTo}
            </if>
            <if test="review != null">
                review = #{review}
            </if>
            <if test="date != null">
                date = #{date}
            </if>
        </set>
        where id = #{id}
    </update>

    <update id="batchUpdate" parameterType="list">
        <foreach collection="list" item="item" open="begin" close=";end;" separator=";">
            update comment
            <set>
                <if test="item.nickname != null">
                    nickname = #{item.nickame},
                </if>
                <if test="item.email != null">
                    email = #{item.email}
                </if>
                <if test="item.website != null">
                    website = #{item.website}
                </if>
                <if test="item.content != null">
                    content = #{item.content}
                </if>
                <if test="item.articleId != null">
                    articleid = #{item.articleId}
                </if>
                <if test="item.replyTo != null">
                    replyto = #{item.replyTo}
                </if>
                <if test="item.review != null">
                    review = #{item.review}
                </if>
                <if test="item.date != null">
                    date = #{item.date}
                </if>
            </set>
            where id = #{item.id}
        </foreach>
    </update>


    <select id="getLimitComment" resultType="comment" resultMap="commentMap">
        select * from comment order by date desc limit #{start},#{limit}
    </select>

    <select id="getCommentByArticleId" parameterType="string" resultType="comment" resultMap="commentMap">
        select * from comment where articleid = #{articleId} and review = 1 order by date desc
    </select>

    <select id="getCommentCountByArticleId" parameterType="string" resultType="int">
        select count(*) from comment where articleid = #{articleId}
    </select>

    <select id="getCommentCount" resultType="int">
        select count(*) from comment
    </select>

    <insert id="insertComment" parameterType="comment">
        insert into comment(id,nickname,email,website,content,articleid,replyto,review,date) values (#{id},#{nickname},#{email},#{website},#{content},#{articleId},#{replyTo},#{review},#{date})
    </insert>

    <update id="commentReview" parameterType="comment">
        update comment
        <set>
            <if test="review!=null">
                review = #{review}
            </if>
        </set>
        where id = #{id}
    </update>

    <delete id="deleteCommentById" parameterType="string">
        delete from comment where id = #{id}
    </delete>

    <delete id="deleteCommentByArticleId" parameterType="string">
        delete from comment where articleid = #{articleId}
    </delete>

</mapper>